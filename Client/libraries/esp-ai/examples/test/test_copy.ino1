
/**
 * 本案例演示: 连接自定义服务和固定 wifi
 * 注意：配置值要用双引号！
 * 服务端使用：https://github.com/wangzongming/esp-ai/tree/master/example
 **/
 
#include <esp-ai.h>
ESP_AI esp_ai;
  

void on_command(String command_id, String data) {
}
void onSessionStatus(String status) {
  // // 处理会话状态
  // if (status == "iat_start") {
  //   face->DoBlink();
  //   face->Behavior.Clear();
  //   face->Behavior.SetEmotion(eEmotions::Squint, 1.0);
  //   face->Update();
  // }
  // if (status == "iat_end") {
  //   face->DoBlink();
  //   face->Behavior.Clear();
  //   face->Behavior.SetEmotion(eEmotions::Happy, 1.0);
  //   face->Behavior.SetEmotion(eEmotions::Surprised, 1.0);
  //   face->Update();
  // }
  // if (status == "tts_real_end") {
  //   face->DoBlink();
  //   face->Behavior.Clear();
  //   face->Behavior.SetEmotion(eEmotions::Normal, 1.0);
  //   face->Update();
  // }
}

void setup() {
  Serial.begin(115200);
 

  // [必  填] 是否调试模式， 会输出更多信息
  bool debug = true;
  // [必  填] wifi 配置： { wifi 账号， wifi 密码, "热点名字" } 可不设置，连不上wifi时会打开热点：ESP-AI，连接wifi后打开地址： 192.168.4.1 进行配网(控制台会输出地址，或者在ap回调中也能拿到信息)
  // ESP_AI_wifi_config wifi_config = { "", "", "ESP-AI" };
  // ESP_AI_wifi_config wifi_config = {"test", "12345678", "ESP-AI"};
  ESP_AI_wifi_config wifi_config = { "oldwang", "oldwang520", "ESP-AI" };
  // [可 填] 服务配置： { 服务协议, 服务IP， 服务端口, "[可选] 请求参数" }
  // ESP_AI_server_config server_config = {  };
  ESP_AI_server_config server_config = { "http", "192.168.3.23", 8088 };
  // [必  填] 唤醒方案： { 方案, 语音唤醒用的阈值(本方案忽略即可), 引脚唤醒方案(本方案忽略), 发送的字符串 }
  ESP_AI_wake_up_config wake_up_config = { "asrpro", 1, 10, "start" };
  // ESP_AI_wake_up_config wake_up_config = { "pin_high", 1, 10 };  // 如果按钮按下是低电平，那使用 pin_low 即可
  // ESP_AI_wake_up_config wake_up_config = { "pin_high_listen", 1, 10 };  // 按下对话
  // ESP_AI_wake_up_config wake_up_config = { "edge_impulse", 0.9 }; // 内置语音唤醒
  // ESP_AI_wake_up_config wake_up_config = { "diy" }; // 内置语音唤醒

  /** 
 * 语音唤醒方案：
 * edge_impulse：内置语音唤醒方案 (esp32S3板子支持)
 *       asrpro：天问语音模块唤醒
 *     pin_high：引脚高电平唤醒
 *      pin_low：引脚低电平唤醒
 *     pin_high_listen：引脚高电平聆听(按下对话)  
 *      pin_low_listen：引脚低电平聆听(按下对话) 
 *       serial：串口字符唤醒
 *       custom：自定义，自行调用 esp_ai.wakeUp() 唤醒
 */
  // ESP_AI_wake_up_config wake_up_config = {
  //   "pin_high",  // 唤醒方案
  //   0.95,        // 使用内置语音唤醒时的唤醒阈值 0-1
  //   10,          // 引脚唤醒方案时需要配置的引脚
  //   "start",     // 天问/串口唤醒方案时需要配置的对方发来的字符串
  //   1000         // vad 时间，默认 1500， 安静环境下非常有用。
  // };


  ESP_AI_volume_config volume_config = {
    .input_pin = 7,   // 输入引脚， 默认 7
    .max_val = 4096,  // 最大输出值
    .volume = 0.9,    // 默认音量
    .enable = false   // 启用电位器
  };

  // 启动
  // esp_ai.onSessionStatus(onSessionStatus);
  esp_ai.begin({ debug, wifi_config, server_config, wake_up_config, volume_config });
  // esp_ai.onEvent(on_command);

  // pinMode(0, INPUT_PULLUP); 
}

int btnClick = 0; // 按钮是否按下
long lastDebounceTime = 0;  // 最后一次按下按钮的时间
long debounceDelay = 100;   // 按下多少 ms 才算，防止传感器自身的误差
int prev_state = 0;    // 输入引脚的先前读数 
 
// 未运行 .begin 和 .loop 时剩余内存：346kb
// 未运行 .begin          时剩余内存：331kb
//    .begin 和 .loop 都运行剩余内存：184kb ----> 

void loop() {
  // Serial.print("   可用内存: ");
  // Serial.print(ESP.getFreeHeap() / 1024);
  // Serial.println("KB");
  // delay(100);

  esp_ai.loop();  
  

  // int reading = digitalRead(0);
  // long curTime = millis(); 
  // if (reading == 1) {
  //   if ((curTime - lastDebounceTime) > debounceDelay) {
  //     lastDebounceTime = curTime;
  //     if (prev_state != reading) {
  //       prev_state = reading;
  //       Serial.print(F("按下了按钮")); 
  //       esp_ai.wakeUp();
  //     }
  //   }
  // } else {
  //   prev_state = reading;
  // }  
}
